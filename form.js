
const ASCII_OVO_TO_UNICODE_OVO = {
  'e@/': 'ê̤',
  'e@\\': 'ě̤',
  'e@': 'e̤',
  '(e@/)': 'ê̤',
  '(e@\\)': 'ě̤',
  '(e@)': 'é̤',
  'I/': 'ị̂',
  'I\\': 'ị̌',
  'I': 'ị',
  '(I/)': 'ị̂',
  '(I\\)': 'ị̌',
  '(I)': 'ı̣́',
  'E@/': 'ê̥',
  'E@\\': 'ě̥',
  'E@': 'e̥',
  '(E@/)': 'é̥̂',
  '(E@\\)': 'é̥̌',
  '(E@)': 'é̥',
  'E/': 'ệ',
  'E\\': 'ẹ̌',
  'E': 'ẹ',
  '(E/)': 'ẹ́̂',
  '(E\\)': 'ẹ́̌',
  '(E)': 'ẹ́',
  'A/': 'ậ',
  'A\\': 'ạ̌',
  'A': 'ạ',
  '(A/)': 'ạ́̂',
  '(A\\)': 'ạ́̌',
  '(A)': 'ạ́',
  'U@/': 'û̥',
  'U@\\': 'ǔ̥',
  'U@': 'u̥',
  '(U@/)': 'ú̥̂',
  '(U@\\)': 'ú̥̌',
  '(U@)': 'ú̥',
  'U/': 'ụ̂',
  'U\\': 'ụ̌',
  'U': 'ụ',
  '(U/)': 'ụ́̂',
  '(U\\)': 'ụ́̌',
  '(U)': 'ụ́',
  'O/': 'ộ',
  'O\\': 'ọ̌',
  'O': 'ọ',
  '(O)': 'ọ́',
  '(O/)': 'ọ́̂',
  '(O\\)': 'ọ́̌',
  'i@/': 'î̤',
  'i@\\': 'ǐ̤',
  'i@': 'i̤',
  '(i@/)': 'ı̤́̂',
  '(i@\\)': 'ı̤́̌',
  '(i@)': 'ı̤́',
  'u@': 'ṳ',
  'u@/': 'ṳ̂',
  'u@\\': 'ṳ̌',
  '(u@/)': 'ṳ́̂',
  '(u@\\)': 'ṳ́̌',
  '(u@)': 'ṳ́',
  'o@/': 'ô̤',
  'o@\\': 'ǒ̤',
  'o@': 'o̤',
  '(o@/)': 'ó̤̂',
  '(o@\\)': 'ó̤̌',
  '(o@)': 'ó̤',
  'i': 'i',
  'i/': 'î',
  'i\\': 'ǐ',
  '(i/)': 'ı́̂',
  '(i\\)': 'ı́̌',
  '(i)': 'ı́',
  'e/': 'ê',
  'e\\': 'ě',
  '(e/)': 'é̂',
  '(e\\)': 'é̌',
  'e': 'e',
  '(e)': 'é',
  'a@/': 'â̤',
  'a@\\': 'ǎ̤',
  'a@': 'a̤',
  '(a@/)': 'á̤̂',
  '(a@\\)': 'á̤̌',
  '(a@)': 'á̤',
  'a/': 'â',
  'a\\': 'ǎ',
  'a': 'a',
  '(a/)': 'á̂',
  '(a\\)': 'á̌',
  '(a)': 'á',
  'o/': 'ô',
  'o\\': 'ǒ',
  'o': 'o',
  '(o/)': 'ó̂',
  '(o\\)': 'ó̌',
  '(o)': 'ó',
  'u/': 'û',
  'u\\': 'ǔ',
  'u': 'u',
  '(u/)': 'ú̂',
  '(u\\)': 'ú̌',
  '(u)': 'ú',
  'm~': 'ṃ',
  'm': 'm',
  'N': 'ṇ',
  'n': 'n',
  'q': 'q',
  'g?': 'g̀',
  'g': 'g',
  '\'': '\'',
  '"': '"',
  'd!': 'd̖',
  'd?': 'd̗',
  'd*': 'd̥',
  'D': 'ḍ',
  'd': 'd',
  'b?': 'b̗',
  'b!': 'b̖',
  'b': 'b',
  'p!': 'ṕ',
  'p*': 'p̊',
  'p': 'p',
  'T': 'ṭ',
  't!': 't̖',
  't*': 't̥',
  't': 't',
  'k!': 'k̖',
  'k*': 'k̥',
  'K': 'ḳ',
  'k': 'k',
  'h@': 'h̤',
  'H': 'ḥ',
  'h': 'h',
  'J': 'ȷ̈',
  'j': 'j',
  'j@': 'ȷ̂',
  'S': 'ṣ',
  's': 's',
  'F': 'f̣',
  'f': 'f',
  'V': 'ṿ',
  'v': 'v',
  'z': 'z',
  'C': 'c̣',
  'c': 'c',
  'L': 'ḷ',
  'l*': 'l̥',
  'l@': 'l̬',
  'l': 'l',
  'r@': 'r̤',
  'R': 'ṛ',
  'r': 'r',
  'x@': 'x̤',
  'X': 'x̣',
  'x': 'x',
  'w': 'w',
  'y': 'y',
}

const IPA_TO_ASCII_OVO = {
  'i': 'i',
  'ɪ': 'I',
  'ɨ': 'i@',
  'e': 'e',
  'ø': 'e@',
  'ɛ': 'E',
  'ɚ': 'E@',
  'ɜ': 'E@',
  'ɝ': 'E@',
  'ɑ': 'a',
  'æ': 'A',
  'ɒ': 'A',
  'o': 'o',
  'ɔ': 'o@',
  'ɵ': 'O',
  'ʊ': 'O',
  'ʏ': 'O',
  'u': 'u',
  'ʉ': 'u@',
  'ɯ': 'u@',
  'ʌ': 'U',
  'ə': 'U',
  'œ': 'U@',
  'b': 'b',
  'ɓ': 'b?',
  'ʙ': 'b!b!',
  'd': 'd',
  'ɖ': 'D',
  'ǂ': 'd*',
  'θ': 'c',
  'ð': 'C',
  'f': 'f',
  'ɸ': 'F',
  'g': 'g',
  'ɢ': 'g',
  'ɠ': 'g?',
  'ʛ': 'g?',
  'ɟ': 'gy',
  'ʄ': 'g?y',
  'h': 'h',
  'ħ': 'h"@',
  'ɦ': 'hh',
  'x': 'H',
  'χ': 'h@',
  'ç': 'hy',
  'ʒ': 'j',
  'ʐ': 'J',
  'ɮ': 'j@',
  'ʑ': 'jy',
  'k': 'k',
  'k\'': 'k!',
  'ǃ': 'k*',
  'q': 'K',
  'q\'': 'K!',
  'm': 'm',
  'n': 'n',
  'ɳ': 'N',
  'ŋ': 'q',
  'ɴ': 'q',
  'ɲ': 'ny',
  'l': 'l',
  'ɭ': 'L',
  'ɬ': 'l@',
  'ɫ': 'lr@',
  'ʎ': 'ly',
  'ǁ': 'l*',
  'p': 'p',
  'p\'': 'p!',
  'ʘ': 'p*',
  'r': 'r',
  'ɽ': 'R',
  'ɣ': 'r@',
  'ʁ': 'r@',
  'ʀ': 'r@r@',
  's': 's',
  't': 't',
  'ʈ': 'T',
  'ǀ': 't*',
  'v': 'v',
  'ʋ': 'V',
  'β': 'V',
  'w': 'w',
  'ʍ': 'wh',
  'ɰ': 'W',
  'ʃ': 'x',
  'ʂ': 'X',
  'ɕ': 'x@',
  'j': 'y',
  'ʝ': 'y',
  'y': 'y',
  'ɥ': 'yw',
  'z': 'z',
  'ʔ': '\'',
  'ʕ': '"',
}

const look = {}
Object.keys(ASCII_OVO_TO_UNICODE_OVO).forEach(key => {
  look[key] = '^' + key.replace(/[\(\)\*\!\?\_\.\[\]\|\\\/]/g, _ => `\\${_}`)
})

const form = text => {
  let remaining = text
  let output = []
  a:
  while (remaining.length) {
    for (let key in ASCII_OVO_TO_UNICODE_OVO) {
      const pattern = look[key]
      const regex = new RegExp(pattern)
      const match = remaining.match(regex)
      if (match) {
        const val = ASCII_OVO_TO_UNICODE_OVO[key]
        output.push(val)
        remaining = remaining.substr(match[0].length)
        continue a
      }
    }
    break
  }
  return output.join('')
}

module.exports = {
  form,
  ASCII_OVO_TO_UNICODE_OVO,
  IPA_TO_ASCII_OVO,
}